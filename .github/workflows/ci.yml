name: Continuous Integration
on: [push, pull_request]
jobs:
  check-generated-versions:
    name: Generated version files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Generate version files"
        run: mkdir build && cd build && cmake .. -DWITH_NATIVE_PLUGINS=OFF
      - name: "Check for changes"
        run: git diff --exit-code
  webui:
    name: Web UI - ${{matrix.build-type}}
    needs: [check-generated-versions]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check tool versions
        run: |
          echo "Yarn: $(yarn --version)"
          echo "TSC: $(tsc --version)"
      - name: Build lib
        working-directory: js-client-lib
        run: yarn install && tsc
      - name: Build web UI
        working-directory: webui
        run: yarn install && yarn run webpack --mode ${{matrix.build-type}}
      - name: Build zip
        working-directory: webui
        run: |
          cp ../LICENSE .
          zip streaming-remote-webui-${{matrix.build-type}}.zip index.html site.css dist/bundle.js
      - uses: actions/upload-artifact@v2
        with:
          name: streaming-remote-webui-${{matrix.build-type}}
          path: webui/streaming-remote-webui-${{matrix.build-type}}.zip
    strategy:
      matrix:
        build-type: [ "production", "development" ]
  streamdeck:
    name: StreamDeck Plugin - ${{matrix.build-type}}
    needs: [check-generated-versions]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install typescript
        run: brew unlink node@12 && brew install typescript
      - name: Check tool versions
        run: |
          echo "Yarn: $(yarn --version)"
          echo "TSC: $(tsc --version)"
      - name: Build lib
        working-directory: js-client-lib
        run: yarn install && tsc
      - name: Copy plugin directory
        run: cp -R streamdeck-plugin ${{runner.temp}}/com.fredemmott.streamingremote.sdPlugin
      - name: Build plugin
        working-directory: streamdeck-plugin
        run: yarn install && yarn run webpack --mode ${{matrix.build-type}}
      - name: Copy built files
        run: |
          mkdir -p ${{runner.temp}}/com.fredemmott.streamingremote.sdPlugin/dist/
          install streamdeck-plugin/dist/bundle.js ${{runner.temp}}/com.fredemmott.streamingremote.sdPlugin/dist/bundle.js
          install LICENSE ${{runner.temp}}/com.fredemmott.streamingremote.sdPlugin/LICENSE
      - name: Checkout StreamDeck DistributionTool
        run: |
          BRANCH=streamdeck-distributiontool-v1.1
          git fetch origin $BRANCH
          git checkout origin/$BRANCH DistributionTool
      - name: Build .streamDeckPlugin
        run: |
          set +e
          ./DistributionTool -b \
            -i ${{runner.temp}}/com.fredemmott.streamingremote.sdPlugin \
            -o .
          if [ $? -eq 0 ]; then
            echo "Distribution tool failed"
            exit 1
          else
            set -e
            test -f com.fredemmott.streamingremote.streamDeckPlugin
          fi
      - name: Build .zip
        run: |
          zip \
          streaming-remote-${{matrix.build-type}}-streamDeckPlugin.zip \
          com.fredemmott.streamingremote.streamDeckPlugin
      - uses: actions/upload-artifact@v2
        with:
          name: streaming-remote-StreamDeckPlugin-${{matrix.build-type}}
          path: streaming-remote-${{matrix.build-type}}-streamDeckPlugin.zip
    strategy:
      matrix:
        build-type: [ "production", "development" ]
  xsplit:
    name: XSplit plugin - ${{matrix.build-type}}
    needs: [check-generated-versions]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check tool versions
        run: |
          echo "Yarn: $(yarn --version)"
          echo "TSC: $(tsc --version)"
      - name: Build XSplit plugin
        working-directory: xsplit-js-plugin
        run: yarn install && yarn run webpack --mode ${{matrix.build-type}}
      - name: Build zip
        working-directory: xsplit-js-plugin
        run: |
          cp ../LICENSE .
          zip streaming-remote-webui-${{matrix.build-type}}.zip LICENSE index.html index.xml index.css dist/bundle.js
      - uses: actions/upload-artifact@v2
        with:
          name: streaming-remote-webui-${{matrix.build-type}}
          path: xsplit-js-plugin/streaming-remote-webui-${{matrix.build-type}}.zip
    strategy:
      matrix:
        build-type: [ "production", "development" ]
  native:
    name: Native - ${{matrix.os}} - ${{matrix.build-type}}
    runs-on: ${{matrix.os}}-latest
    env:
      OBS_VERSION: 25.0.5
      OBS_BUILD_TYPE: Release
      QT_CACHE_VERSION: 4
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{runner.temp}}/Qt
          key: Qt-${{matrix.qt-version}}-${{matrix.os}}-${{env.QT_CACHE_VERSION}}
      - uses: jurplel/install-qt-action@v2
        with:
          version: 5.10.1
          dir: ${{runner.temp}}/Qt
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          arch: ${{matrix.qt-platform}}
          aqtversion: ==0.9.0
          extra: --archives qtbase
      - name: Cache OBS
        id: cache-obs
        uses: actions/cache@v1
        with:
          path: obs-studio
          key: OBS-${{env.OBS_VERSION}}-${{ matrix.os }}
      - name: Install OBS dependencies (MacOS)
        if: matrix.os == 'macos' && steps.cache-obs.outputs.cache-hit != 'true'
        run: brew install ffmpeg x264 mbedtls swig
      - name: Install OBS dependencies (Windows)
        if: matrix.os == 'windows' && steps.cache-obs.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest `
            -Uri https://obsproject.com/downloads/dependencies2017.zip `
            -OutFile dependencies2017.zip
          Expand-Archive `
            -Path dependencies2017.zip `
            -DestinationPath ${{runner.temp}}/obs-deps
        shell: powershell
      - name: Checkout OBS
        uses: actions/checkout@v2
        if: steps.cache-obs.outputs.cache-hit != 'true'
        with:
          repository: obsproject/obs-studio
          path: obs-studio
          ref: ${{env.OBS_VERSION}}
          submodules: recursive
      - name: Set build architecture (Windows)
        if: matrix.os == 'windows'
        run: echo "::set-env name=CMAKE_PLATFORM_GENERATOR::x64"
      - name: Configure OBS
        if: steps.cache-obs.outputs.cache-hit != 'true'
        working-directory: obs-studio
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${OBS_BUILD_TYPE} \
            -DDepsPath=$(echo "${{runner.temp}}/obs-deps/win64" | tr "\\\\" /)
        shell: bash
      - name: Build OBS
        if: steps.cache-obs.outputs.cache-hit != 'true'
        working-directory: obs-studio/build
        run: cmake --build . --parallel --config ${OBS_BUILD_TYPE} --target libobs --target obs-frontend-api
      - name: Install dependencies (MacOS)
        if: matrix.os == 'macos'
        run: brew install libsodium
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: streaming-remote
      - name: Configure
        working-directory: streaming-remote
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{matrix.build-type}} \
            -DCMAKE_INSTALL_BINDIR=$(echo "${{runner.temp}}/prefix" | tr "\\\\" / ) \
            -DCMAKE_INSTALL_LIBDIR=$(echo "${{runner.temp}}/prefix" | tr "\\\\" / ) \
            -DWITH_XSPLIT=ON \
            -DWITH_OBS=ON \
            -DOBS_SOURCE_DIR=$(echo "${{github.workspace}}/obs-studio/" | tr "\\\\" /) \
            -DOBS_BUILD_DIR=$(echo "${{github.workspace}}/obs-studio/build/" | tr "\\\\" /)
        shell: bash
      - name: Build
        working-directory: streaming-remote/build
        run: cmake --build . --parallel --config ${{matrix.build-type}}
      - name: Install
        working-directory: streaming-remote/build
        run: |
          cmake --install . --config ${{matrix.build-type}}
          install ../LICENSE ../LICENSE.OBS_COMBINED_WORK ${{runner.temp}}/prefix/
      - name: Make zips
        working-directory: ${{runner.temp}}/prefix
        run: |
          mkdir ../artifacts
          zip ../artifacts/obs-streaming-remote-${{matrix.os}}-${{matrix.build-type}}.zip LICENSE LICENSE.OBS_COMBINED_WORK obs*
          if [ "${{matrix.os}}" == "windows" ]; then
            zip ../artifacts/xsplit-streaming-remote-${{matrix.os}}-${{matrix.build-type}}.zip LICENSE xsplit*
          fi
        shell: bash
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: streaming-remote-binaries-${{matrix.os}}-${{matrix.build-type}}
          path: ${{runner.temp}}/artifacts
    strategy:
      matrix:
        os: [macos, windows]
        build-type: [Release, Debug]
        include:
          - os: windows
            qt-version: 5.10.1
          - os: macos
            qt-version: 5.14.1
